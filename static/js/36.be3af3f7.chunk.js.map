{"version":3,"file":"static/js/36.be3af3f7.chunk.js","mappings":"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","sources":["api/request.js","components/Error/ErrorMessages.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/SearchBox/SearchBox.styled.jsx","components/SearchBox/SearchBox.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'a3efd2dd48cf6aca9d1b3d7226cefee9';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchMovies = async (detailedUrl, signal) => {\n  const response = await axios.get(detailedUrl, {\n    signal,\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n\n  return response.data;\n};\n\nexport const fetchMoviesbyTitle = async (query, signal) => {\n  const response = await axios.get('search/movie', {\n    signal,\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query,\n    },\n  });\n  return response.data.results;\n};\n","import PropTypes from 'prop-types';\n\nexport const ErrorMessages = ({ children }) => {\n  return (\n    <div\n      style={{\n        color: 'red',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nErrorMessages.propTypes = {\n  images: PropTypes.element,\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 24px;\n  @media screen and (max-width: 458px) {\n    gap: 12px;\n  }\n`;\n\n\nexport const Item = styled.li`\n  max-width: 300px;\n  border: none;\n  border-radius: 8px;\n  padding: 0;\n  margin: 0;\n  background-color: #ebbfaf;\n  overflow: hidden;\n  transition: transform 250ms cubic-bezier(0.65, 0.05, 0.36, 1);\n\n  &:hover {\n    transform: scale(1.02);\n  }\n`;\n\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: black;\n  font-weight: 500;\n  transition: color 250ms cubic-bezier(0.65, 0.05, 0.36, 1);\n\n  &:hover {\n    color: orangered;\n  }\n`;\n\nexport const Image = styled.img`\n  display: block;\n  height: auto;\n  max-height: 420px;\n  max-width: 100%;\n  object-fit: cover;\n`;\n\n\nexport const Title = styled.h3`\n  font-size: 14px;\n  line-height: 1.30;\n  padding: 12px;\n  margin:0;\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { List, Title, Item, MovieLink, Image } from './MoviesList.styled';\n\nexport const MoviesList = ({ data }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {data.map(({ id, poster_path, title, name }) => {\n        return (\n          <Item key={id}>\n            <MovieLink\n              to={location.pathname === '/movies' ? `${id}` : `movies/${id}`}\n              state={{ from: location }}\n            >\n              {poster_path ? (\n                <Image\n                  src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                  alt={title || name}\n                  width=\"300\"\n                />\n              ) : (\n                <Image\n                  src=\"https://cringemdb.com/img/movie-poster-placeholder.png\"\n                  alt=\"placeholder\"\n                  width=\"300\"\n                />\n              )}\n              <Title>{title ? title : name}</Title>\n            </MovieLink>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nMoviesList.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({}).isRequired).isRequired,\n};\n","import styled from '@emotion/styled';\nimport { HiSearch } from 'react-icons/hi';\nimport { Form as FormikForm, Field as FormikField } from 'formik';\n\n\n\nexport const Icon = styled(HiSearch)`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  right: 6px;\n  transition: fill 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    fill: orangered;\n    transform: scale(1.2);\n  }\n`;\n\n\nexport const Form = styled(FormikForm)`\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  margin-bottom: 16px;\n  text-transform: uppercase;\n`;\n\nexport const Field = styled(FormikField)`\n  padding: 8px 32px 8px 8px;\n  border-radius: 4px;\n  font: inherit;\n`;\n\nexport const SubmitBtn = styled.button`\n  position: absolute;\n  top: 0;\n  right: 4px;\n  cursor: pointer;\n  padding: 8px;\n  background-color: transparent;\n  border: none;\n`;\n","import PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport { Form, Field, SubmitBtn, Icon } from './SearchBox.styled';\n\nexport const SearchBox = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{ query: '' }}\n      onSubmit={({ query }, { resetForm }) => {\n        onSubmit(query);\n        resetForm();\n      }}\n    >\n      <Form>\n        <SubmitBtn type=\"submit\">\n          <Icon />\n        </SubmitBtn>\n\n        <Field\n          type=\"text\"\n          name=\"query\"\n          title=\"Please enter movie name.\"\n          placeholder=\"Movie name\"\n          required\n        />\n      </Form>\n    </Formik>\n  );\n};\n\nSearchBox.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useRef, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMoviesbyTitle } from 'api/request';\nimport { SearchBox } from 'components/SearchBox/SearchBox';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Loader } from 'components/Loader/Loader';\nimport { ErrorMessages } from 'components/Error/ErrorMessages';\n\nconst Movies = () => {\n  const [movie, setMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n \n  const movieName = searchParams.get('query') ?? '';\n\n  const abortCtrl = useRef();\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  useEffect(() => {\n    if (movieName === '') {\n      return;\n    }\n\n    const getDetailsMovies = async () => {\n      if (abortCtrl.current) {\n        abortCtrl.current.abort();\n      }\n\n      abortCtrl.current = new AbortController();\n\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        const movieData = await fetchMoviesbyTitle(\n          movieName,\n          abortCtrl.current.signal\n        );\n        setMovie(movieData);\n        setError(null);\n\n        if (movieData.length === 0) {\n          return setError(\n            'Oops.. There`s no movies matching your request. Please try again!'\n          );\n        }\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          setError(error.message);\n        }\n        setIsLoading(false);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getDetailsMovies();\n  }, [movieName]);\n\n  return (\n    <div>\n      <h3>Find your movie!</h3>\n      <SearchBox value={movieName} onSubmit={updateQueryString} />\n      {!isLoading && movie.length !== 0 && <MoviesList data={movie} />}\n      {isLoading && <Loader />}\n      {error && <ErrorMessages>{error}</ErrorMessages>}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","axios","fetchMovies","detailedUrl","signal","params","api_key","language","response","data","fetchMoviesbyTitle","query","results","ErrorMessages","children","style","color","List","styled","Item","MovieLink","Link","Image","Title","MoviesList","location","useLocation","map","id","poster_path","title","name","to","pathname","state","from","src","alt","width","Icon","HiSearch","Form","FormikForm","Field","FormikField","SubmitBtn","SearchBox","onSubmit","initialValues","resetForm","type","placeholder","required","useState","movie","setMovie","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","movieName","get","abortCtrl","useRef","useEffect","getDetailsMovies","current","abort","AbortController","movieData","length","code","message","value","Loader"],"sourceRoot":""}