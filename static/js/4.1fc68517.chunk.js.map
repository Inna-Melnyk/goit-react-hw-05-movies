{"version":3,"file":"static/js/4.1fc68517.chunk.js","mappings":"uOAEMA,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAW,mCAAG,WAAOC,EAAaC,GAApB,uFACFH,EAAAA,EAAAA,IAAUE,EAAa,CAC5CC,OAAAA,EACAC,OAAQ,CACNC,QAASN,EACTO,SAAU,WALW,cACnBC,EADmB,yBASlBA,EAASC,MATS,2CAAH,wDAYXC,EAAkB,mCAAG,WAAOC,EAAOP,GAAd,uFACTH,EAAAA,EAAAA,IAAU,eAAgB,CAC/CG,OAAAA,EACAC,OAAQ,CACNC,QAASN,EACTO,SAAU,QACVI,MAAAA,KAN4B,cAC1BH,EAD0B,yBASzBA,EAASC,KAAKG,SATW,2CAAH,uD,oEClBlBC,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC9B,OACE,yBACGA,GAGN,C,0KCJYC,EAAQC,EAAAA,EAAAA,IAAH,wHAQLC,EAAQD,EAAAA,EAAAA,GAAH,iGAMLE,EAAOF,EAAAA,EAAAA,EAAH,qF,SCfJG,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjBC,EAAkCD,EAAlCC,KAAMC,EAA4BF,EAA5BE,aAAcC,EAAcH,EAAdG,UAC5B,OACE,gCACGD,GACC,SAACP,EAAD,CACES,IAAG,yCAAoCF,GACvCG,IAAKJ,EACLK,MAAM,SAGR,SAACX,EAAD,CACES,IAAI,8FACJC,IAAI,cACJC,MAAM,SAGV,UAACT,EAAD,eAASI,MACT,UAACH,EAAD,yBAAkBK,OAGvB,ECpBYI,EAAOX,EAAAA,EAAAA,GAAH,8KAWJY,EAAOZ,EAAAA,EAAAA,GAAH,uOCVJa,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACE,SAACH,EAAD,UACGG,EAAKC,KAAI,SAAAX,GACR,OACE,SAACQ,EAAD,WACE,SAACT,EAAD,CAAUC,KAAMA,KADPA,EAAKY,GAInB,KAGN,E,oBCsCD,EA9Ca,WACX,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOH,EAAP,KAAaI,EAAb,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEMC,GAAYC,EAAAA,EAAAA,UAEVC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAO,gBAAYF,EAAZ,YA4Bb,OA1BAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,2FACVN,EAAUO,SACZP,EAAUO,QAAQC,QAGpBR,EAAUO,QAAU,IAAIE,gBALV,SAQZZ,GAAa,GACbE,EAAS,MATG,UAWWpC,EAAAA,EAAAA,GAAYyC,EAASJ,EAAUO,QAAQ1C,QAXlD,OAWN6C,EAXM,OAYZf,EAAQe,EAASnB,MACjBQ,EAAS,MAbG,kDAeO,iBAAf,KAAMY,MACRZ,EAAS,KAAMa,SAhBL,yBAmBZf,GAAa,GAnBD,6EAAH,qDAsBbS,GACD,GAAE,CAACF,KAGF,2BACGR,IAAa,SAACiB,EAAA,EAAD,IACbf,IAAS,SAACxB,EAAA,EAAD,UAAgBwB,IACzBP,IAAQ,SAACD,EAAD,CAAUC,KAAMA,MAG9B,C","sources":["api/request.js","components/Error/ErrorMessages.jsx","components/MovieDetail/Cast/CastItem/CastItem.styled.jsx","components/MovieDetail/Cast/CastItem/CastItem.jsx","components/MovieDetail/Cast/CastList.styled.jsx","components/MovieDetail/Cast/CastList.jsx","components/MovieDetail/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'a3efd2dd48cf6aca9d1b3d7226cefee9';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchMovies = async (detailedUrl, signal) => {\n  const response = await axios.get(detailedUrl, {\n    signal,\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n\n  return response.data;\n};\n\nexport const fetchMoviesbyTitle = async (query, signal) => {\n  const response = await axios.get('search/movie', {\n    signal,\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query,\n    },\n  });\n  return response.data.results;\n};\n","export const ErrorMessages = ({ children }) => {\n  return (\n    <div>\n      {children}\n    </div>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Image = styled.img`\n  display: block;\n  height: auto;\n  max-width: 100%;\n  height: 330px;\n  object-fit: cover;\n`;\n\nexport const Title = styled.h3`\n  font-size: 18px;\n  line-height: 1.3;\n  padding: 12px;\n  margin: 0;\n`;\nexport const Text = styled.p`\n  margin: 0;\n  font-size: 12px;\n\n  padding: 0 12px 12px;\n`;","import { Image, Title, Text } from \"./CastItem.styled\";\nexport const CastItem = ({ item }) => {\n  const { name, profile_path, character } = item;\n  return (\n    <>\n      {profile_path ? (\n        <Image\n          src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n          alt={name}\n          width=\"220\"\n        />\n      ) : (\n        <Image\n          src=\"https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png?20170328184010\"\n          alt=\"placeholder\"\n          width=\"220\"\n        />\n      )}\n      <Title> {name}</Title>\n      <Text>Character: {character}</Text>\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap:wrap;\n  justify-content: center;\n  gap:22px;\n  padding: 0;\n  padding-top: 20px;\n  margin: 0;\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  max-width: 220px;\n  border: none;\n  border-radius: 8px;\n  padding: 0;\n  margin: 0;\n  background-color: #ebbfaf;\n  overflow: hidden;\n  transition: transform 250ms cubic-bezier(0.65, 0.05, 0.36, 1);\n`;\n","import { CastItem } from './CastItem/CastItem';\nimport { List, Item } from './CastList.styled';\n\nexport const CastList = ({ cast }) => {\n  return (\n    <List>\n      {cast.map(item => {\n        return (\n          <Item key={item.id}>\n            <CastItem item={item} />\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n","import { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovies } from 'api/request';\nimport { CastList } from './CastList';\nimport { Loader } from 'components/Loader/Loader';\nimport { ErrorMessages } from 'components/Error/ErrorMessages';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const abortCtrl = useRef();\n\n  const { movieId } = useParams();\n\n  const castUrl = `movie/${movieId}/credits`;\n\n  useEffect(() => {\n    const getCast = async () => {\n      if (abortCtrl.current) {\n        abortCtrl.current.abort();\n      }\n\n      abortCtrl.current = new AbortController();\n\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        const castData = await fetchMovies(castUrl, abortCtrl.current.signal);\n        setCast(castData.cast);\n        setError(null);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          setError(error.message);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getCast();\n  }, [castUrl]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <ErrorMessages>{error}</ErrorMessages>}\n      {cast && <CastList cast={cast} />}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["API_KEY","axios","fetchMovies","detailedUrl","signal","params","api_key","language","response","data","fetchMoviesbyTitle","query","results","ErrorMessages","children","Image","styled","Title","Text","CastItem","item","name","profile_path","character","src","alt","width","List","Item","CastList","cast","map","id","useState","setCast","isLoading","setIsLoading","error","setError","abortCtrl","useRef","movieId","useParams","castUrl","useEffect","getCast","current","abort","AbortController","castData","code","message","Loader"],"sourceRoot":""}