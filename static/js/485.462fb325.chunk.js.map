{"version":3,"file":"static/js/485.462fb325.chunk.js","mappings":"yOAEMA,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAW,mCAAG,WAAOC,EAAaC,GAApB,uFACFH,EAAAA,EAAAA,IAAUE,EAAa,CAC5CC,OAAAA,EACAC,OAAQ,CACNC,QAASN,EACTO,SAAU,WALW,cACnBC,EADmB,yBASlBA,EAASC,MATS,2CAAH,wDAYXC,EAAkB,mCAAG,WAAOC,EAAOP,GAAd,uFACTH,EAAAA,EAAAA,IAAU,eAAgB,CAC/CG,OAAAA,EACAC,OAAQ,CACNC,QAASN,EACTO,SAAU,QACVI,MAAAA,KAN4B,cAC1BH,EAD0B,yBASzBA,EAASC,KAAKG,SATW,2CAAH,uD,oEClBlBC,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC9B,OACE,yBACGA,GAGN,C,4GCHYC,EAAOC,EAAAA,EAAAA,GAAH,yNAYJC,EAAOD,EAAAA,EAAAA,GAAH,sXAoBJE,GAAYF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,iMAWTI,EAAQJ,EAAAA,EAAAA,IAAH,4NAaLK,EAAQL,EAAAA,EAAAA,GAAH,iG,SCxDLM,EAAa,SAAC,GAAc,IAAZb,EAAW,EAAXA,KAEnBc,GAAWC,EAAAA,EAAAA,MAEnB,OACE,SAACT,EAAD,UACGN,EAAKgB,KAAI,SAAAC,GAER,OADAC,QAAQC,IAAIF,IAEV,SAACT,EAAD,WACE,UAACC,EAAD,CACEW,GACwB,YAAtBN,EAASO,SAAT,UACOJ,EAAMK,IADb,iBAEcL,EAAMK,IAEtBC,MAAO,CAAEC,KAAMV,GANjB,UAQEG,EAAMQ,aACJ,SAACd,EAAD,CACEe,IAAG,yCAAoCT,EAAMQ,aAC7CE,IAAKV,EAAMW,OAASX,EAAMY,KAC1BC,MAAM,SAGR,SAACnB,EAAD,CACEe,IAAI,yDACJC,IAAI,cACJG,MAAM,SAGV,SAAClB,EAAD,UAAQK,EAAMW,MAAQX,EAAMW,MAAQX,EAAMY,WAtBnCZ,EAAMK,GA0BpB,KAGN,C,4KCvCYV,E,QAAQL,EAAAA,GAAH,+K,SCsDlB,EA/Ca,WACX,OAA4BwB,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACMC,GAAYC,EAAAA,EAAAA,UA+BlB,OA7BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,2FACpBH,EAAUI,SACZJ,EAAUI,QAAQC,QAGpBL,EAAUI,QAAU,IAAIE,gBALA,SAQtBT,GAAa,GACbE,EAAS,MATa,UAWG5C,EAAAA,EAAAA,GApBb,mBAsBV6C,EAAUI,QAAQ/C,QAbE,OAWhBkD,EAXgB,OAetBZ,EAAUY,EAAW1C,SACrBkC,EAAS,MAhBa,kDAkBH,iBAAf,KAAMS,MACRT,EAAS,KAAMU,SAnBK,yBAsBtBZ,GAAa,GAtBS,6EAAH,qDAyBvBM,GACD,GAAE,KAGD,iCACE,SAAC7B,EAAD,6BACCsB,IAAa,SAACc,EAAA,EAAD,IACbZ,IAAS,SAAChC,EAAA,EAAD,UAAgBgC,KACxBF,GAAaF,EAAOiB,OAAS,IAC7B,SAACpC,EAAA,EAAD,CAAYb,KAAMgC,MAIzB,C","sources":["api/request.js","components/Error/ErrorMessages.jsx","components/MoviesList/MovieList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'a3efd2dd48cf6aca9d1b3d7226cefee9';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchMovies = async (detailedUrl, signal) => {\n  const response = await axios.get(detailedUrl, {\n    signal,\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n\n  return response.data;\n};\n\nexport const fetchMoviesbyTitle = async (query, signal) => {\n  const response = await axios.get('search/movie', {\n    signal,\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query,\n    },\n  });\n  return response.data.results;\n};\n","export const ErrorMessages = ({ children }) => {\n  return (\n    <div>\n      {children}\n    </div>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 24px;\n  @media screen and (max-width: 458px) {\n    gap: 12px;\n  }\n`;\nexport const Item = styled.li`\n  max-width: 300px;\n  border: none;\n  border-radius: 8px;\n  padding: 0;\n  margin: 0;\n  background-color: #ebbfaf;\n  overflow: hidden;\n  transition: transform 250ms cubic-bezier(0.65, 0.05, 0.36, 1);\n\n  &:hover {\n    transform: scale(1.02);\n  }\n  @media screen and (max-width: 458px) {\n    max-width: 170px;\n    max-height: 350px;\n  }\n`;\n\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: black;\n  font-weight: 500;\n  transition: color 250ms cubic-bezier(0.65, 0.05, 0.36, 1);\n\n  &:hover {\n    color: orangered;\n  }\n`;\n\nexport const Image = styled.img`\n  display: block;\n  height: auto;\n  max-height: 420px;\n  max-width: 100%;\n  @media screen and (max-width: 458px) {\n    max-width: 170px;\n    max-height: 250px;\n    object-fit: cover;\n  }\n`;\n\n\nexport const Title = styled.h3`\n  font-size: 14px;\n  line-height: 1.30;\n  padding: 12px;\n  margin:0;\n`;\n","import { useLocation } from 'react-router-dom';\nimport { List, Title, Item, MovieLink, Image } from './MovieList.styled';\n\nexport const MoviesList = ({ data }) => {\n\n    const location = useLocation();\n\n  return (\n    <List>\n      {data.map(movie => {\n        console.log(movie);\n        return (\n          <Item key={movie.id}>\n            <MovieLink\n              to={\n                location.pathname === '/movies'\n                  ? `${movie.id}`\n                  : `movies/${movie.id}`\n              }\n              state={{ from: location }}\n            >\n             {movie.poster_path ? (\n                <Image\n                  src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n                  alt={movie.title || movie.name}\n                  width=\"300\"\n                />\n              ) : (\n                <Image\n                  src=\"https://cringemdb.com/img/movie-poster-placeholder.png\"\n                  alt=\"placeholder\"\n                  width=\"300\"\n                />\n              )}\n              <Title>{movie.title ? movie.title : movie.name}</Title>\n            </MovieLink>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h1`\n  font-size: 28px;\n  line-height: 1.3;\n  padding: 6px;\n  margin: 0 0 30px;\n  @media screen and (max-width: 665px) {\n    text-align: center;\n  }\n`;\n","import { useEffect, useRef, useState } from 'react';\nimport { fetchMovies } from 'api/request';\nimport { Loader } from 'components/Loader/Loader';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { ErrorMessages } from 'components/Error/ErrorMessages';\nimport { Title } from './Home.styled';\n\nconst trandingUrl = 'trending/all/day';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const abortCtrl = useRef();\n\n  useEffect(() => {\n    const getTrendingMovies = async () => {\n      if (abortCtrl.current) {\n        abortCtrl.current.abort();\n      }\n\n      abortCtrl.current = new AbortController();\n\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        const moviesData = await fetchMovies(\n          trandingUrl,\n          abortCtrl.current.signal\n        );\n        setMovies(moviesData.results);\n        setError(null);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          setError(error.message);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getTrendingMovies();\n  }, []);\n\n  return (\n    <>\n      <Title>Trending today</Title>\n      {isLoading && <Loader />}\n      {error && <ErrorMessages>{error}</ErrorMessages>}\n      {!isLoading && movies.length > 0 && (\n        <MoviesList data={movies} />\n      )}\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["API_KEY","axios","fetchMovies","detailedUrl","signal","params","api_key","language","response","data","fetchMoviesbyTitle","query","results","ErrorMessages","children","List","styled","Item","MovieLink","Link","Image","Title","MoviesList","location","useLocation","map","movie","console","log","to","pathname","id","state","from","poster_path","src","alt","title","name","width","useState","movies","setMovies","isLoading","setIsLoading","error","setError","abortCtrl","useRef","useEffect","getTrendingMovies","current","abort","AbortController","moviesData","code","message","Loader","length"],"sourceRoot":""}