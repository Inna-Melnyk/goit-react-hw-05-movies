{"version":3,"file":"static/js/216.8c7661ac.chunk.js","mappings":"yOAEMA,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAW,mCAAG,WAAOC,EAAaC,GAApB,uFACFH,EAAAA,EAAAA,IAAUE,EAAa,CAC5CC,OAAAA,EACAC,OAAQ,CACNC,QAASN,EACTO,SAAU,WALW,cACnBC,EADmB,yBASlBA,EAASC,MATS,2CAAH,wDAYXC,EAAkB,mCAAG,WAAOC,EAAOP,GAAd,uFACTH,EAAAA,EAAAA,IAAU,eAAgB,CAC/CG,OAAAA,EACAC,OAAQ,CACNC,QAASN,EACTO,SAAU,QACVI,MAAAA,KAN4B,cAC1BH,EAD0B,yBASzBA,EAASC,KAAKG,SATW,2CAAH,uD,oEClBlBC,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC9B,OACE,yBACGA,GAGN,C,sJCJYC,EAAa,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3B,OACM,wBACCA,EAAQC,KAAI,SAAAC,GACX,OACE,2BACM,qCAAaA,EAAKC,WAClB,uBAAKD,EAAKE,YAFPF,EAAKG,GAKjB,KAGR,E,oBCiDD,EAzDgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAON,EAAP,KAAgBO,EAAhB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,EAAU,gBAAYF,EAAZ,YAEVG,GAAYC,EAAAA,EAAAA,WAElBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,2FACbH,EAAUI,SACZJ,EAAUI,QAAQC,QAEpBL,EAAUI,QAAU,IAAIE,gBAJP,SAOfZ,GAAa,GACbE,EAAS,MARM,UAUWzB,EAAAA,EAAAA,GACxB4B,EACAC,EAAUI,QAAQ/B,QAZL,OAUTkC,EAVS,OAeff,EAAWe,EAAY1B,SACvBe,EAAS,MAhBM,kDAkBI,iBAAf,KAAMY,MACRZ,EAAS,KAAMa,SAnBF,yBAsBff,GAAa,GAtBE,6EAAH,qDA0BhBS,GACD,GAAE,CAACJ,IAEJ,IAAMW,EAAOzB,EAAQ0B,OAGrB,OAFAC,QAAQC,IAAIH,IAGV,2BACGjB,IAAa,SAACqB,EAAA,EAAD,IACbnB,IAAS,SAACb,EAAA,EAAD,UAAgBa,IAEN,IAAnBV,EAAQ0B,QACP,SAAC3B,EAAD,CAAYC,QAASA,KAErB,oDAIP,C","sources":["api/request.js","components/Error/ErrorMessages.jsx","components/MovieDetail/Reviews/ReviewList.jsx","components/MovieDetail/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'a3efd2dd48cf6aca9d1b3d7226cefee9';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchMovies = async (detailedUrl, signal) => {\n  const response = await axios.get(detailedUrl, {\n    signal,\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n\n  return response.data;\n};\n\nexport const fetchMoviesbyTitle = async (query, signal) => {\n  const response = await axios.get('search/movie', {\n    signal,\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query,\n    },\n  });\n  return response.data.results;\n};\n","export const ErrorMessages = ({ children }) => {\n  return (\n    <div>\n      {children}\n    </div>\n  );\n};\n","\n\nexport const ReviewList = ({ reviews }) => {\n  return (\n        <ul>\n        {reviews.map(item => {\n          return (\n            <li key={item.id}>\n                  <h4>Author: {item.author}</h4>\n                  <p>{ item.content}</p>\n            </li>\n          );\n        })}\n      </ul>\n  );\n};\n","import { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovies } from 'api/request';\nimport { ReviewList } from './ReviewList';\nimport { Loader } from 'components/Loader/Loader';\nimport { ErrorMessages } from 'components/Error/ErrorMessages';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n  const reviewsUrl = `movie/${movieId}/reviews`;\n\n  const abortCtrl = useRef();\n\n  useEffect(() => {\n    const getReviews = async () => {\n      if (abortCtrl.current) {\n        abortCtrl.current.abort();\n      }\n      abortCtrl.current = new AbortController();\n\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        const reviewsData = await fetchMovies(\n          reviewsUrl,\n          abortCtrl.current.signal\n        );\n\n        setReviews(reviewsData.results);\n        setError(null);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          setError(error.message);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getReviews();\n  }, [reviewsUrl]);\n\n  const cons = reviews.length;\n  console.log(cons);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <ErrorMessages>{error}</ErrorMessages>}\n\n      {reviews.length !== 0 ? (\n        <ReviewList reviews={reviews} />\n      ) : (\n        <p>There's no reviews yet</p>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;"],"names":["API_KEY","axios","fetchMovies","detailedUrl","signal","params","api_key","language","response","data","fetchMoviesbyTitle","query","results","ErrorMessages","children","ReviewList","reviews","map","item","author","content","id","useState","setReviews","isLoading","setIsLoading","error","setError","movieId","useParams","reviewsUrl","abortCtrl","useRef","useEffect","getReviews","current","abort","AbortController","reviewsData","code","message","cons","length","console","log","Loader"],"sourceRoot":""}